name: Deploy Lambda Function

on:
  push:
    branches:
      - dev
      - prod

permissions:
  id-token: write
  contents: read

env:
  DEV_BRANCH: dev
  PROD_BRANCH: prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install AWS CLI
        run: pip install awscli

      - name: Zip Lambda Function
        run: zip -r lambda_function.zip lambda_function/lambda_function.py

      - name: Determine Environment
        id: env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/${{ env.DEV_BRANCH }}" ]]; then
            echo "::set-output name=env::dev"
            echo "::set-output name=bucket::${{ secrets.DEV_S3_BUCKET }}"
            echo "::set-output name=role::${{ secrets.DEV_AWS_ROLE_ARN }}"
            echo "::set-output name=key::dev/lambda_function.zip"
            echo "::set-output name=dir::terraform/dev"
          elif [[ "${GITHUB_REF}" == "refs/heads/${{ env.PROD_BRANCH }}" ]]; then
            echo "::set-output name=env::prod"
            echo "::set-output name=bucket::${{ secrets.PROD_S3_BUCKET }}"
            echo "::set-output name=role::${{ secrets.PROD_AWS_ROLE_ARN }}"
            echo "::set-output name=key::prod/lambda_function.zip"
            echo "::set-output name=dir::terraform/prod"
          else
            echo "Invalid branch for deployment"
            exit 1
          fi

      - name: Configure AWS credentials with OIDC
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ steps.env.outputs.role }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Lambda to S3
        run: aws s3 cp lambda_function.zip s3://${{ steps.env.outputs.bucket }}/${{ steps.env.outputs.key }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0  # Specify your Terraform version

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ steps.env.outputs.dir }}

      - name: Terraform Plan
        run: terraform plan -var-file=${{ github.workspace }}/terraform/terraform.tfvars -out=tfplan
        working-directory: ${{ steps.env.outputs.dir }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ steps.env.outputs.dir }}

      - name: Verify Deployment
        run: aws lambda get-function --function-name ${{ secrets.TF_VAR_lambda_function_name }}
